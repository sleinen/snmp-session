		       SNMP support for Perl 5
		       -----------------------

	     Author: Simon Leinen  <simon@instrumatic.ch>
			    Contributors:
		 Tobias Oetiker <oetiker@ee.ethz.ch>
		  Andrzej Tobola <san@iem.pw.edu.pl>
		      Dave Rand <dlr@Bungi.com>

This archive contains Perl 5 modules SNMP_Session.pm and BER.pm,
which, when used together, provide rudimentary access to remote SNMP
(v1) agents.

The SNMP operations currently supported are "get" and "get-next".
That means that you cannot set values or receive or generate SNMP
traps using these routines.  Hopefully I will get around to
implementing these other operations one day.

For an excellent example of the type of application this is useful
for, see version 2.0 (currently in beta) of Tobias Oetiker's ``mrtg''
(Multi Router Traffic Grapher) tool:
<URL:http://www.ee.ethz.ch/~oetiker/webtools/mrtg/mrtg.html>

				Usage
				.....

The basic usage of these routines works like this:

	use BER;
	require 'SNMP_Session.pm';

	# Set $host to the name of the host whose SNMP agent you want
	# to talk to.  Set $community to the community name under
	# which you want to talk to the agent.	Set port to the UDP
	# port on which the agent listens (usually 161).

	$session = SNMP_Session::open ($host, $community, $port);

	# Set $oid1, $oid2... to the BER-encoded OIDs of the MIB
	# variables you want to get.

	if ($session->get_request_response ($oid1, $oid2, ...)) {
	    $session->{pdu_buffer};
	    ($bindings) = $session->decode_get_response ($session->{pdu_buffer});
	
	    while ($bindings ne '') {
		($binding,$bindings) = &decode_sequence ($bindings);
		($oid,$value) = &decode_by_template ($binding, "%O%@");
		print $pretty_oids{$oid}," => ",
		      &pretty_print ($value), "\n";
	    }
	} else {
	    die "No response from agent on $host";
	}

			    Encoding OIDs
			    .............

In order to BER-encode OIDs, you can use the function BER::encode_oid.
It takes (a vector of) numeric subids as an argument.  For example,

	use BER;
	encode_oid (1, 3, 6, 1, 2, 1, 1, 1, 0)

will return the BER-encoded OID for the sysDescr.0 (1.3.6.1.2.1.1.1.0)
instance of MIB-2.

			 Decoding the results
			 ....................

When get_request_response returns success, you must decode the
response PDU from the remote agent.  The function
`decode_get_response' can be used to do this.  It takes a get-response
PDU, checks its syntax and returns the "bindings" part of the PDU.
This is where the remote agent actually returns the values of the
variables in your query.

You should iterate over the individual bindings in this "bindings"
part and extract the value for each variable.  In the example above,
the returned bindings are simply printed using the BER::pretty_print
function.  The hash %pretty_oids in the example contains a mapping
from BER-encoded OIDs to "readable" instance names.  Look at the
source of the real example programs to see how this is constructed.
