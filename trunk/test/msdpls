#!/usr/local/bin/perl -w

use strict;

use SNMP_Session;
use BER;
use Socket;

my $version = '1';
my $port = 161;
my $debug = 0;

while (defined $ARGV[0] && $ARGV[0] =~ /^-/) {
    if ($ARGV[0] =~ /^-v/) {
	if ($ARGV[0] eq '-v') {
	    shift @ARGV;
	    usage (1) unless defined $ARGV[0];
	} else {
	    $ARGV[0] = substr($ARGV[0], 2);
	}
	if ($ARGV[0] eq '1') {
	    $version = '1';
	} elsif ($ARGV[0] eq '2c') {
	    $version = '2c';
	} else {
	    usage (1);
	}
    } elsif ($ARGV[0] =~ /^-p/) {
	if ($ARGV[0] eq '-p') {
	    shift @ARGV;
	    usage (1) unless defined $ARGV[0];
	} else {
	    $ARGV[0] = substr($ARGV[0], 2);
	}
	if ($ARGV[0] =~ /^[0-9]+$/) {
	    $port = $ARGV[0];
	} else {
	    usage (1);
	}
    } elsif ($ARGV[0] eq '-h') {
	usage (0);
	exit 0;
    } else {
	usage (1);
    }
    shift @ARGV;
}
my $host = shift @ARGV || usage (1);
my $community = shift @ARGV || "public";
usage (1) if $#ARGV >= $[;
my $session =
    ($version eq '1' ? SNMPv1_Session->open ($host, $community, $port)
     : $version eq '2c' ? SNMPv2c_Session->open ($host, $community, $port)
     : die "Unknown SNMP version $version")
  || die "Opening SNMP_Session";
$session->debug (1) if $debug;

my $msdpSACachePeerLearnedFrom = [1,3,6,1,3,92,1,1,6,1,4];
my $msdpSACacheRPFPeer = [1,3,6,1,3,92,1,1,6,1,5];
my $msdpSACacheInSAs = [1,3,6,1,3,92,1,1,6,1,6];
my $msdpSACacheInDataPackets = [1,3,6,1,3,92,1,1,6,1,7];
my $msdpSACacheUpTime = [1,3,6,1,3,92,1,1,6,1,8];
my $msdpSACacheExpiryTime = [1,3,6,1,3,92,1,1,6,1,9];
my $msdpSACacheStatus = [1,3,6,1,3,92,1,1,6,1,10];

sub msdp_map_group ($$$) {
    my ($session, $group, $mapfn) = @_;
    my @group_subids = split (/\./, inet_ntoa ($group), 4);
    my @oids = ([@{$msdpSACachePeerLearnedFrom},@group_subids],
		[@{$msdpSACacheRPFPeer},@group_subids],
		[@{$msdpSACacheInSAs},@group_subids],
		[@{$msdpSACacheInDataPackets},@group_subids],
		[@{$msdpSACacheUpTime},@group_subids],
		[@{$msdpSACacheExpiryTime},@group_subids],
		[@{$msdpSACacheStatus},@group_subids]);
    $session->map_table
	(\@oids,
	 sub () {
	     my ($index,
		 $peer_learned_from,$rpf_peer,
		 $in_sas,$in_data_packets,
		 $up_time,$expiry_time,
		 $status) = @_;
	     map { $_ = pretty_print $_ if defined $_ }
	     ($peer_learned_from,$rpf_peer,$in_sas,$in_data_packets,
	      $up_time,$expiry_time,$status);
	     my ($source,$rp);
	     (($source,$rp) = ($index =~ /^([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+)\.([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+)$/))
		 || die "?";
	     &$mapfn ($source,$rp,$peer_learned_from,$rpf_peer,
		      $in_sas,$in_data_packets,
		      $up_time,$expiry_time,
		      $status);
});
}

sub msdp_list_group ($$) {
    my ($session, $group) = @_;
    msdp_map_group ($session,$group,
		    sub () {
			my ($source,$rp,
			    $peer_learned_from,$rpf_peer,
			    $in_sas,$in_data_packets,
			    $up_time,$expiry_time,$status) = @_;
			#return unless $in_data_packets;
			my $source_name = gethostbyaddr (inet_aton ($source),AF_INET) || $source;
			print "  $source_name [$source] $in_data_packets\n";
			print " $peer_learned_from != $rpf_peer\n"
			    if $peer_learned_from ne $rpf_peer;
		    });
}

msdp_list_group ($session, inet_aton ("233.2.171.1"));
1;
