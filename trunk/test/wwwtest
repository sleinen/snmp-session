#!/logiciels/public/divers/bin/perl5

require 5;

require 'SNMP_Session.pm';
use BER;

$query_string = $ENV{'QUERY_STRING'};

if (!defined ($query_string) || !$query_string) {
    write_query_form ();
} else {
    my (%query) = parse_query ();
    init_oids ();
    query_to_html_response ($query{'hostname'}, $query{'community'});
}
1;

sub parse_query
{
    my (%query) = (());
    foreach (split('&',$query_string)) {
	($lhs,$rhs) = split('=',$_,2);
	$query{$lhs} = $rhs if $rhs;
    }
    return %query;
}

sub init_oids
{
    %ugly_oids = qw(sysDescr.0		1.3.6.1.2.1.1.1.0
		    sysContact.0	1.3.6.1.2.1.1.4.0
		    ipForwarding.0	1.3.6.1.2.1.4.1.0
		    ifNumber.0		1.3.6.1.2.1.2.1.0
		    ifMtu.1		1.3.6.1.2.1.2.2.1.4.1
		    ifMtu.2		1.3.6.1.2.1.2.2.1.4.2
		    ifInOctets.1	1.3.6.1.2.1.2.2.1.10.1
		    ifInOctets.2	1.3.6.1.2.1.2.2.1.10.2
		    ifOutOctets.1	1.3.6.1.2.1.2.2.1.16.1
		    ifOutOctets.2	1.3.6.1.2.1.2.2.1.16.2
		    );
    foreach (keys %ugly_oids) {
	$ugly_oids{$_} = encode_oid (split (/\./, $ugly_oids{$_}));
	$pretty_oids{$ugly_oids{$_}} = $_;
    }
}

sub query_to_html_response
{
    local($hostname, $community) = @_;

    print "Content-type: text/html\n\n",
    "<HTML><HEAD><TITLE>SNMP Test</TITLE></HEAD>\n<BODY>\n<H1>SNMP query to ",
    html_quote ($hostname), "</H1>\n<HR>\n";

    srand();
    eval '$session = SNMP_Session->open ($hostname, $community, 161)';
    html_error_message ("opening SNMP session", $@), return 0 if $@;
    eval 'snmp_get ($session, qw(sysDescr.0 sysContact.0 ipForwarding.0
			   ifNumber.0
			   ifMtu.1 ifInOctets.1 ifOutOctets.1
			   ifMtu.2 ifInOctets.2 ifOutOctets.2))';
    html_error_message ("executing SNMP query", $@), return 0 if $@;
    $session->close ();

    print "</BODY>\n</HTML>\n";
    1;
}

sub html_error_message
{
    my($context, $errmsg) = @_;

    print "<H2>SNMP Error</H2>\n";
    print "<P>While ",$context,", the following error occurred:</P>\n";
    print "<PRE>",&html_quote($errmsg),"</PRE></BODY></HTML>";
}

sub snmp_get
{
    my($session, @oids) = @_;
    my($response, $bindings, $binding, $value, $oid);
    grep ($_ = $ugly_oids{$_}, @oids);
    if ($session->get_request_response (@oids)) {
	$response = $session->{pdu_buffer};
	($bindings) = $session->decode_get_response ($response);

	print "<TABLE BORDER>\n";
	while ($bindings ne '') {
	    ($binding,$bindings) = decode_sequence ($bindings);
	    ($oid,$value) = decode_by_template ($binding, "%O%@");
	    print "<TR>",
	    "<TD ALIGN=RIGHT>", &html_quote (pretty_print ($value)), "</SAMP></TD>",
	    "<TH ALIGN=LEFT>", $pretty_oids{$oid}, "</TH>",
	    "</TR>\n";
	}
	print "</TABLE>\n";
	1;
    } else {
	die "No response received.\n";
    }
}

sub html_quote
{
    local ($_) = @_;

    return $_ unless /[<>&]/;
    s/&/&amp;/g;
    s/</&lt;/g;
    s/>/&gt;/g;
    $_;
}

sub write_query_form
{
    print <<EOM;
Content-type: text/html
Content-transfer-encoding: binary

<HTML>
<HEAD><TITLE>Perl SNMP Module Test</TITLE></HEAD>
<BODY>
<H1>Perl SNMP Module Test</H1>
<HR>
<FORM>
Host name:
<SELECT NAME=hostname>
<OPTION VALUE="liasg1.epfl.ch">liasg1.epfl.ch
<OPTION VALUE="liasg2.epfl.ch">liasg2.epfl.ch
<OPTION VALUE="liasg3.epfl.ch">liasg3.epfl.ch
<OPTION VALUE="liasg4.epfl.ch">liasg4.epfl.ch
<OPTION VALUE="liasg5.epfl.ch">liasg5.epfl.ch
<OPTION VALUE="liasg6.epfl.ch">liasg6.epfl.ch
<OPTION SELECTED VALUE="liasg7.epfl.ch">liasg7.epfl.ch
<OPTION VALUE="liasg8.epfl.ch">liasg8.epfl.ch
<OPTION VALUE="liasg9.epfl.ch">liasg9.epfl.ch
</SELECT>
Community name:
<SELECT NAME=community>
<OPTION VALUE="public">public
</SELECT>
<BR>
<INPUT TYPE=submit VALUE="Send request">
<INPUT TYPE=reset VALUE="Clear">
</FORM>
</BODY>
</HTML>
EOM
}
