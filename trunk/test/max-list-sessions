#!/usr/local/bin/perl -w

use strict;

use SNMP_Session "0.59";
use BER;
use Socket;

my $host = shift @ARGV || die;
my $community = shift @ARGV || die;

my $ssnStatusIndex = [1,3,6,1,4,1,529,12,2,1,1];
my $ssnStatusValidFlag = [1,3,6,1,4,1,529,12,2,1,2];
my $ssnStatusUserName = [1,3,6,1,4,1,529,12,2,1,3];
my $ssnStatusUserIPAddress = [1,3,6,1,4,1,529,12,2,1,4];
my $ssnStatusUserSubnetMask = [1,3,6,1,4,1,529,12,2,1,5];
my $ssnStatusCurrentService = [1,3,6,1,4,1,529,12,2,1,6];
my $ssnStatusCallReferenceNum = [1,3,6,1,4,1,529,12,2,1,7];

my $callStatusIndex = [1,3,6,1,4,1,529,11,2,1,1];
my $callStatusValidFlag = [1,3,6,1,4,1,529,11,2,1,2];
my $callStatusStartingTimeStamp = [1,3,6,1,4,1,529,11,2,1,3];
my $callStatusCallReferenceNum = [1,3,6,1,4,1,529,11,2,1,4];
my $callStatusDataRate = [1,3,6,1,4,1,529,11,2,1,5];
my $callStatusSlotNumber = [1,3,6,1,4,1,529,11,2,1,6];
my $callStatusSlotLineNumber = [1,3,6,1,4,1,529,11,2,1,7];
my $callStatusSlotChannelNumber = [1,3,6,1,4,1,529,11,2,1,8];
my $callStatusModemSlotNumber = [1,3,6,1,4,1,529,11,2,1,9];
my $callStatusModemOnSlot = [1,3,6,1,4,1,529,11,2,1,10];
my $callStatusIfIndex = [1,3,6,1,4,1,529,11,2,1,11];
my $callSessionIndex = [1,3,6,1,4,1,529,11,2,1,12];
my $callStatusType = [1,3,6,1,4,1,529,11,2,1,13];
my $callStatusXmitRate = [1,3,6,1,4,1,529,11,2,1,14];
my $callStatusPortType = [1,3,6,1,4,1,529,11,2,1,15];

my $session = SNMP_Session->open ($host, $community, 161)
  || die "Opening SNMP_Session";
list_sessions ($session);
list_calls ($session);

sub list_calls ($) {
    my ($session) = @_;
    $session->map_table ([$callStatusValidFlag,
			  $callStatusDataRate],
			 \&out_call);
}

sub list_sessions ($) {
    my ($session) = @_;
    $session->map_table ([$ssnStatusIndex, $ssnStatusValidFlag,
			  $ssnStatusUserName,
			  $ssnStatusUserIPAddress, $ssnStatusUserSubnetMask,
			  $ssnStatusCurrentService, $ssnStatusCallReferenceNum],
			 \&out_session);
}
1;

sub pretty_service ($) {
    my ($service) = @_;
    return
	$service == 1 ? 'none'
	: $service == 2 ? 'other'
	: $service == 3 ? 'ppp'
	: $service == 4 ? 'slip'
	: $service == 5 ? 'mpp'
	: $service == 6 ? 'x25'
	: $service == 7 ? 'combinet'
	: $service == 8 ? 'frameRelay'
	: $service == 9 ? 'euraw'
	: $service == 10 ? 'euui'
	: $service == 11 ? 'telnet'
	: $service == 12 ? 'telnetBinary'
	: $service == 13 ? 'rawTcp'
	: $service == 14 ? 'terminalServer'
	: $service == 15 ? 'mp'
	: $service == 16 ? 'virtualConnect'
	: $service == 17 ? 'dchannelX25'
	: $service == 18 ? 'dtpt'
	    : 'unknown('.$service.')';
}

sub out_session {
    my ($index, $i2, $valid, $user, $addr, $mask, $service, $call_ref) = @_;

    grep (defined $_ && ($_=pretty_print $_),
	  ($i2, $valid, $user, $addr, $mask, $service, $call_ref));
    return if $valid == 1;	# invalid
    printf STDOUT ("%2d  %-24s %-15s %-15s %5d %s\n",
		   $index,
		   defined $user ? $user : '',
		   inet_ntoa (pack ("C4",split ('\.',$addr))),
		   inet_ntoa (pack ("C4",split ('\.',$mask))),
		   $call_ref,
		   pretty_service ($service));
}

sub out_call {
    my ($index, $valid, $rate) = @_;

    grep (defined $_ && ($_=pretty_print $_),
	  ($valid, $rate));
    return if $valid == 1;	# invalid
    printf STDOUT ("%2d  %d\n", $index, $rate);
}
