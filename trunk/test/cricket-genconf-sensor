#!/usr/local/bin/perl -w
##
## cricket-genconf-sensor
##
## Generate Cricket configuration for sensor monitoring
##
## Author:        Simon Leinen  <simon@limmat.switch.ch>
## Date created:  21-Dec-2006
##
## This script generates Cricket configuration files for
## SNMP-monitorable sensors in a set of routers.  It does this on the
## basis of a RANCID configuration file repository.  For each router
## in that directory that seems to have monitorable sensors, the
## script calls the `entls' script to generate Cricket configuration.
##
## The script puts newly generated configuration files into a
## temporary directory, and then installs some "safe" configuration
## changes by itself.  For other configuration changes, the user is
## presented with "diff" output and has to decide how to apply them.

use strict;

### Prototypes
sub read_router_configurations ($ );
sub has_sensors_p ($ );
sub maybe_install_new_configuration ($ );
sub install_new_configuration ($ );

my $rancid_directory = '/usr/local/rancid/backbone/configs';

my @routers = read_router_configurations ($rancid_directory);

my $cricket_config_dir = '/home/cricket/cricket-config';
my $old_config_dir = $cricket_config_dir.'/'.'transceiver-monitoring';

-d $old_config_dir or die "cannot find existing configuration $old_config_dir";

my $new_config_dir = '/tmp'.'/foo/';
-d $new_config_dir
    or mkdir $new_config_dir
    or die "Cannot create $new_config_dir: $!";

my (@unchanged, @installed, @unresolved);
foreach my $router (@routers) {
    next unless has_sensors_p ($router);
    my $rdir = $new_config_dir.'/'.$router;
    -d $rdir or mkdir $rdir or die "cannot create directory $rdir: $!";
    my $retval = system ('perl -Ilib test/entls -t hctiws@'
			 .$router.':::::2:v4only > '
			 .$rdir.'/'.$router);
    if ($retval) {
	warn "failed to generate configuration for $router";
    } else {
	maybe_install_new_configuration ($router);
    }
}
print "Unchanged: ",join (", ", @unchanged),"\n";
print "Installed: ",join (", ", @installed),"\n";
print "Unresolved: ",join (", ", @unresolved),"\n";
1;

sub read_router_configurations ($ ) {
    my ($dir) = @_;
    my @routers = ();
    opendir CONFIG, $dir
	or die "open directory $dir: $!";
    foreach my $file (readdir CONFIG) {
	next unless -f $dir.'/'.$file;
	push @routers, $file;
    }
    closedir CONFIG
	or die "close directory $dir: $!";
    @routers;
}

sub has_sensors_p ($ ) {
    my ($router) = @_;
    my $have_sensor_p = 0;
    open (CONFIG, $rancid_directory.'/'.$router)
	or die "open configuration file for $router: $!";
    while (<CONFIG>) {
	$have_sensor_p = 1
	    if /Receive Power Sensor/;
    }
    close CONFIG or die "close configuration file for $router: $!";
    return $have_sensor_p;
}

## maybe_install_new_configuration ROUTER
##
## Check whether the newly generated Cricket configuration file for
## router ROUTER has to/can be installed.
##
## If the file doesn't exist in the current configuration, we can
## safely install the new one.
##
## If the newly generated file is identical to the old one, we don't
## have to do anything.
##
## The the newly generated file differs from the old one, we output
## the diff and don't install anything.
##
## TODO: Apply the diffs.  This is not totally trivial, however.  As
## long as the diff consists in only added lines, the new file can be
## safely installed over the current one.  But when configuration is
## lost (i.e. sensors are removed), we should deactivate the lost
## targets using "collect = 0", rather than removing them entirely, to
## make sure that history is kept.
##
## There is an additional case, namely that a file exists in the
## current configuration that was not generated in the new run.  We
## don't handle this situation currently.
##
## TODO: Check the existing configuration for files that were lost in
## the new generation run, and deactivate collection in these files.
##
## Actual installation of configurations is performed by
## install_new_configuration().
##
sub maybe_install_new_configuration ($ ) {
    my ($router) = @_;
    my $old_file = $old_config_dir.'/'.$router.'/'.$router;
    my $new_file = $new_config_dir.'/'.$router.'/'.$router;

    if (! -f $old_file) {
	print "NEW: $router\n";
	if (install_new_configuration ($router)) {
	    push @installed, $router;
	} else {
	    push @unresolved, $router;
	}
    } else {
	my $retval = system ("diff", "-uw", $old_file, $new_file);
	if ($retval) {
	    ##warn "TESTING:\n";
	    ##$retval = system "diff -w $old_file $new_file | egrep -v '\^>'";
	    ##warn "TESTING END: $retval\n";
	    print "DIFFER: $router\n";
	    push @unresolved, $router;
	} else {
	    push @unchanged, $router;
	    unlink $new_file;
	}
    }
}

## install_new_configuration ROUTER
##
## Install the newly generated configuration file for router ROUTER in
## the active directory tree.  The containing directory is created if
## needed.
##
sub install_new_configuration ($ ) {
    my ($router) = @_;
    my $old_file = $old_config_dir.'/'.$router.'/'.$router;
    my $new_file = $new_config_dir.'/'.$router.'/'.$router;
    my $old_dir = $old_config_dir.'/'.$router;

    unless (-d $old_dir || mkdir $old_dir) {
	warn "Cannot create $old_dir: $!";
	return undef;
    }
    if (system ("mv", $new_file, $old_file)) {
	warn "Failed to move $new_file to $old_file";
	return undef;
    }
    return 1;
}
